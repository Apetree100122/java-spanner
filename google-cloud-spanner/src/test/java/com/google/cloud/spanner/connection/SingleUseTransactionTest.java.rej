diff a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/SingleUseTransactionTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/SingleUseTransactionTest.java	(rejected hunks)
@@ -24,8 +24,10 @@ import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+import com.google.api.core.ApiFuture;
 import com.google.api.gax.longrunning.OperationFuture;
 import com.google.cloud.Timestamp;
+import com.google.cloud.spanner.AsyncResultSet;
 import com.google.cloud.spanner.DatabaseClient;
 import com.google.cloud.spanner.ErrorCode;
 import com.google.cloud.spanner.Key;
@@ -230,6 +232,34 @@ public class SingleUseTransactionTest {
     public Timestamp getReadTimestamp() {
       return readTimestamp;
     }
+
+    @Override
+    public AsyncResultSet readAsync(
+        String table, KeySet keys, Iterable<String> columns, ReadOption... options) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public AsyncResultSet readUsingIndexAsync(
+        String table, String index, KeySet keys, Iterable<String> columns, ReadOption... options) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ApiFuture<Struct> readRowAsync(String table, Key key, Iterable<String> columns) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ApiFuture<Struct> readRowUsingIndexAsync(
+        String table, String index, Key key, Iterable<String> columns) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public AsyncResultSet executeQueryAsync(Statement statement, QueryOption... options) {
+      throw new UnsupportedOperationException();
+    }
   }
 
   private DdlClient createDefaultMockDdlClient() {
@@ -721,6 +751,7 @@ public class SingleUseTransactionTest {
     SingleUseTransaction subject = createSubjectWithTimeout(1L);
     try {
       subject.executeQuery(createParsedQuery(SLOW_QUERY), AnalyzeMode.NONE);
+      fail("missing expected exception");
     } catch (SpannerException e) {
       if (e.getErrorCode() != ErrorCode.DEADLINE_EXCEEDED) {
         throw e;
